/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'bookman' at '11/16/16 4:01 PM' with Gradle 3.3-20161019000016+0000
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.3-20161019000016+0000/userguide/tutorial_java_projects.html
 */

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

sourceCompatibility = '1.7'
version = '1.0'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'com.google.guava:guava:18.0'
    compile group: 'com.google.cloud.dataflow', name: 'google-cloud-dataflow-java-sdk-all', version: '1.8.0'
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.1.0'
    compile group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.1.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}

task resources {
    def resourcesDir = new File('build/resources/main')
    resourcesDir.mkdirs()
}


run {
    if (project.hasProperty('args')) {
        args project.args.split('\\s')
    }
}


task uberjar(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from {configurations.compile.collect {zipTree(it)}} {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    manifest {
      attributes 'Main-Class': 'com.google.datastorebackup.Main'
    }
}